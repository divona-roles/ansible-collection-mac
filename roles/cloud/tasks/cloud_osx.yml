# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Copyright (C) 2021 Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: System | Check Packer installation
  ansible.builtin.command: which packer
  register: packer_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: System | Get installed Packer version
  ansible.builtin.command: "{{ packer_installation.stdout }} -version"
  when: not packer_installation is failed
  changed_when: false
  check_mode: false
  register: installed_packer_version

- name: System | Packer installation is required
  ansible.builtin.set_fact:
    packer_installation_required: "{{ packer_installation is failed or installed_packer_version.stdout != packer_version }}"

- name: System | Download Packer archive
  ansible.builtin.get_url:
    url: "{{ packer_darwin_download_url }}"
    dest: "/tmp/{{ packer_darwin_package_name }}"
    mode: 0600
    checksum: "{{ packer_darwin_checksum }}"
  when:
    - packer_installation_required

- name: System | Install Packer
  ansible.builtin.unarchive:
    src: "/tmp/{{ packer_darwin_package_name }}"
    dest: "{{ packer_darwin_dir }}"
  when:
    - packer_installation_required

# - name: Install Packer
#   homebrew:
#     name: packer
#     state: latest

- name: System | Check Terraform installation
  ansible.builtin.command: which terraform
  register: terraform_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: System | Get installed Terraform version
  ansible.builtin.shell: |
    set -o pipefail
    {{ terraform_installation.stdout }} -version|awk -F 'v' '{ print $2}'|head -1
  when: not terraform_installation is failed
  changed_when: false
  check_mode: false
  register: installed_terraform_version

- name: System | Terraform installation is required
  ansible.builtin.set_fact:
    terraform_installation_required: "{{ terraform_installation is failed or installed_terraform_version.stdout != terraform_version }}"

- name: System | Download Terraform archive
  ansible.builtin.get_url:
    url: "{{ terraform_darwin_download_url }}"
    dest: "/tmp/{{ terraform_darwin_package_name }}"
    mode: 0600
    checksum: "{{ terraform_darwin_checksum }}"
  when:
    - terraform_installation_required

- name: System | Install Terraform
  ansible.builtin.unarchive:
    src: "/tmp/{{ terraform_darwin_package_name }}"
    dest: "{{ terraform_darwin_dir }}"
  when:
    - terraform_installation_required

# - name: Install Terraform
#   homebrew:
#     name: terraform
#     state: latest

- name: System | Check Vault installation
  ansible.builtin.command: which vault
  register: vault_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: System | Get installed Vault version
  ansible.builtin.shell: |
    set -o pipefail
    {{ vault_installation.stdout }} -version|awk -F ' ' '{ print $2}'|head -1|sed -e 's/v//g'
  when: not vault_installation is failed
  changed_when: false
  check_mode: false
  register: installed_vault_version

- name: System | Vault installation is required
  ansible.builtin.set_fact:
    vault_installation_required: "{{ vault_installation is failed or installed_vault_version.stdout != vault_version }}"

- name: System | Download Vault archive
  ansible.builtin.get_url:
    url: "{{ vault_darwin_download_url }}"
    dest: "/tmp/{{ vault_darwin_package_name }}"
    mode: 0600
    checksum: "{{ vault_darwin_checksum }}"
  when:
    - vault_installation_required

- name: System | Install Vault
  ansible.builtin.unarchive:
    src: "/tmp/{{ vault_darwin_package_name }}"
    dest: "{{ vault_darwin_dir }}"
  when:
    - vault_installation_required

# - name: Install Vault
#   homebrew:
#     name: vault
#     state: latest

- name: System | Check Kubernetes CLI installation
  ansible.builtin.command: which kubectl
  register: kubectl_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: System | Get installed Kubernetes CLI version
  ansible.builtin.shell: |
    set -o pipefail
    {{ kubectl_installation.stdout }} version --client --short|awk -F 'v' '{ print $2}'
  when: not kubectl_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kubectl_version

- name: System | Kubernetes installation is required
  set_fact:
    kubernetes_cli_installation_required: "{{ kubectl_installation is failed or installed_kubectl_version.stdout != kubernetes_cli_version }}"

- name: System | Install Kubernetes CLI
  ansible.builtin.get_url:
    url: "{{ kubernetes_cli_darwin_download_url }}"
    dest: "{{ kubernetes_cli_darwin_file }}"
    checksum: "{{ minikube_darwin_checksum }}"
    mode: 0755
  when:
    - kubernetes_cli_installation_required

# - name: Install Kubernetes CLI
#   homebrew:
#     name: kubernetes-cli
#     state: latest

- name: System | Install GCloud SDK
  ansible.builtin.unarchive:
    src: "{{ gcloud_sdk_darwin_download_url }}"
    dest: "{{ gcloud_sdk_darwin_dir }}"
    remote_src: true

- name: System | Adding GCloud command to user path
  ansible.builtin.file:
    src: "{{ gcloud_sdk_darwin_dir }}/google-cloud-sdk/bin/gcloud"
    dest: /Users/{{ user }}/bin/gcloud
    state: link
